interfaces {
    lo0 {
        unit 0 {
            family inet {
                address {{ .Config.Vars.lo_inet }}/32;
            }
        }
    }
{{- $ifaces := index .Config.Vars "ospf_p2p_ifaces" }}
{{- if $ifaces }}
{{- range $iface := $ifaces }}
    {{ $iface }} {
        unit 0 {
            family inet {
                unnumbered-address lo0.0;
            }
        }
    }
{{- end }}
{{- end }}
{{- if .Config.Vars.ebgp_interface }}
    {{ .Config.Vars.ebgp_interface }} {
        unit 0 {
            family inet {
                address {{ .Config.Vars.ebgp_local_address }}/31;
            }
        }
    }
{{- end }}
}
protocols {
    ospf {
        area 0.0.0.0 {
            interface lo0.0;
{{- $ifaces := index .Config.Vars "ospf_p2p_ifaces" }}
{{- if $ifaces }}
{{- range $iface := $ifaces }}
            interface {{ $iface }}.0 {
                interface-type p2p;
            }
{{- end }}
{{- end }}
        }
    }
{{- if .Config.Vars.ibgp_mesh }}
    bgp {
        group IBGP {
            type internal;
            local-as {{ .Config.Vars.local_as }};
            local-address {{ .Config.Vars.lo_inet }};
            bfd-liveness-detection {
                minimum-interval 100;
                multiplier 3;
            }
{{- $nbrs := index .Config.Vars "ibgp_mesh" }}
{{- $self := .Config.Vars.lo_inet }}
{{- if $nbrs }}
{{- range $nbr := $nbrs }}
{{- if ne $nbr $self }}
            neighbor {{ $nbr }};
{{- end }}
{{- end }}
{{- end }}
        }
    }
    export test_export_tag;
{{- end }}
{{- if .Config.Vars.ebgp_local_as }}
    bgp {
        group EBGP {
            type external;
            local-as {{ .Config.Vars.ebgp_local_as }};
            local-address {{ .Config.Vars.ebgp_local_address }};
            peer-as {{ .Config.Vars.ebgp_peer_as }}
            neighbor {{ .Config.Vars.ebgp_neighbor }}
            bfd-liveness-detection {
                minimum-interval 100;
                multiplier 3;
            }
        }
    }
{{- end }}
}
policy-options {
    policy-statement test_export_tag {
        term ok {
            from tag 3550;
            protocol static;
            then accept;
        }
        then reject;
    }
}
